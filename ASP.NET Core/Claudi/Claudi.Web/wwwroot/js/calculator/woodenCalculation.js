function calculate(model, color, width, height, driving) {
	//wooden MODELS ---------------------------
	let woodModels = new Array("25 мм", "50 мм");
	//var woodColordur = new Array("CLASSIC", "CITY");
	let modelCode = 0; // default model
	let totalPrice = 0;

	getModel();
	let error = checkBoundories(modelCode, width, height);
	return printFinalPrice(error);

	function getModel() {
		modelCode = woodModels.indexOf(model);	//models are the rows in  horizontalTable
	}

	function checkBoundories(model, width, height) {
		let errorMSG = "Зададените размери са извън позволената площ на продукта";
		let sqrtMeters = width * height / 10000;
		if (model == 0) {
			if (width < 30 || width > 240 || height < 30 || height > 300) {
				return errorMSG;
			}
		}
		else {
			if (width < 50 || width > 240 || height < 50 || height > 300) {
				return errorMSG;
			}
		}

		if (sqrtMeters > 4) {
			return errorMSG;
		}
	}

	function ConvertSizesWoodenBlinds(arg) {
		var local = Math.round(Math.ceil(arg) / 10);

		//local = local / 10;
		local = local - 4;

		if (local < 0) {
			local = 0;
		}
		return local;
	}

	function printFinalPrice(error) {
		if (error !== undefined) {
			return error
		}

		let squareMeters;
		let discount = 6;	//precent discount
		let StrVodeneChk = driving;

		let sizeWidth = ConvertSizesWoodenBlinds(width);
		let sizeHeight = ConvertSizesWoodenBlinds(height);

		let woodenBlindsPrices25mm = [
			[64, 70, 79, 85, 94, 101, 108, 116, 124, 131, 138, 146, 154, 162, 169, 176, 184, 193, 199, 207, 214, 221, 228, 235],
			[68, 76, 85, 94, 102, 111, 118, 127, 136, 145, 152, 162, 170, 179, 188, 197, 204, 214, 222, 230, 239, 248, 257, 266],
			[73, 82, 90, 101, 110, 121, 131, 140, 149, 159, 168, 178, 188, 197, 205, 216, 225, 234, 244, 253, 264, 275, 286, 297],
			[78, 88, 98, 108, 118, 131, 141, 151, 161, 171, 183, 193, 203, 214, 225, 235, 245, 256, 266, 278, 288, 298, 308, 318],
			[82, 93, 105, 116, 127, 140, 151, 162, 174, 185, 197, 208, 219, 232, 243, 255, 266, 278, 289, 301, 312, 323, 334, 345],
			[85, 99, 111, 124, 136, 149, 161, 174, 186, 199, 211, 224, 236, 250, 261, 274, 286, 299, 311, 324, 337, 350, 363, 376],
			[90, 104, 118, 131, 145, 159, 171, 185, 199, 212, 226, 239, 252, 266, 280, 293, 307, 321, 333, 348, 361, 374, 387, 400],
			[95, 110, 124, 138, 152, 168, 183, 197, 211, 226, 240, 255, 269, 284, 298, 313, 327, 342, 356, 371, 385, 399, 413, 427],
			[100, 116, 131, 146, 162, 178, 193, 208, 224, 239, 255, 270, 286, 301, 317, 332, 348, 363, 378, 394, 409, 424, 439, 454],
			[104, 121, 137, 154, 170, 188, 203, 219, 236, 252, 269, 286, 303, 319, 336, 352, 368, 384, 400, 418, 434, 450, 466, 482],
			[109, 126, 143, 161, 179, 197, 214, 231, 250, 266, 284, 301, 319, 337, 354, 371, 389, 407, 424, 441, 458, 475, 492, 509],
			[113, 131, 151, 169, 188, 205, 224, 243, 261, 280, 298, 317, 336, 354, 372, 390, 409, 428, 446, 464, 483, 502, 521, 0],
			[118, 137, 157, 176, 197, 216, 235, 255, 274, 293, 313, 332, 352, 371, 390, 409, 429, 448, 469, 486, 507, 528, 0, 0],
			[123, 142, 164, 184, 204, 225, 245, 265, 286, 307, 327, 348, 368, 388, 409, 429, 450, 470, 491, 512, 0, 0, 0, 0],
			[127, 149, 170, 191, 213, 234, 256, 278, 299, 321, 342, 363, 384, 407, 428, 448, 470, 492, 513, 0, 0, 0, 0, 0],
			[131, 154, 176, 199, 222, 244, 266, 289, 311, 333, 356, 378, 400, 424, 446, 469, 491, 513, 0, 0, 0, 0, 0, 0],
			[136, 160, 183, 207, 230, 253, 276, 300, 324, 348, 371, 394, 418, 441, 464, 486, 510, 0, 0, 0, 0, 0, 0, 0],
			[142, 165, 189, 214, 239, 262, 288, 312, 337, 360, 385, 409, 434, 458, 483, 440, 0, 0, 0, 0, 0, 0, 0, 0],
			[146, 171, 197, 222, 247, 273, 298, 323, 348, 374, 399, 425, 450, 476, 501, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[151, 176, 203, 229, 256, 281, 308, 334, 361, 388, 414, 441, 466, 493, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[155, 183, 209, 237, 265, 291, 319, 347, 374, 400, 429, 456, 483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[159, 188, 217, 245, 274, 301, 329, 358, 386, 414, 443, 471, 499, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[165, 193, 223, 252, 281, 311, 341, 370, 399, 428, 457, 486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[169, 199, 229, 260, 290, 321, 351, 381, 412, 441, 471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[173, 204, 236, 267, 298, 331, 361, 393, 424, 456, 486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[178, 211, 242, 275, 307, 340, 372, 404, 436, 469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[183, 216, 250, 284, 315, 348, 382, 416, 448, 479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		];

		let woodenBlindsPrices50mm = [
			[119, 119, 131, 146, 157, 169, 181, 193, 205, 219, 231, 242, 255, 267, 280, 292, 304, 317, 329, 342, 354, 416, 433, 450],
			[119, 119, 131, 146, 157, 169, 181, 193, 205, 219, 231, 242, 255, 267, 280, 292, 304, 317, 329, 342, 354, 416, 433, 450],
			[126, 126, 140, 152, 167, 180, 193, 207, 221, 234, 247, 261, 274, 286, 302, 314, 327, 342, 355, 368, 382, 450, 466, 484],
			[133, 133, 147, 162, 176, 190, 205, 221, 235, 250, 265, 279, 293, 308, 322, 337, 352, 366, 380, 394, 409, 483, 500, 517],
			[140, 140, 155, 171, 188, 203, 219, 234, 250, 265, 281, 297, 312, 327, 343, 359, 375, 390, 407, 422, 437, 515, 533, 550],
			[146, 146, 164, 180, 198, 214, 231, 247, 265, 281, 297, 314, 332, 347, 365, 382, 399, 414, 432, 450, 466, 548, 565, 582],
			[154, 154, 171, 190, 207, 226, 242, 261, 279, 297, 314, 332, 350, 368, 385, 404, 421, 439, 457, 475, 494, 581, 599, 615],
			[161, 161, 180, 198, 218, 236, 256, 274, 293, 312, 332, 350, 369, 388, 407, 426, 444, 465, 483, 502, 520, 613, 630, 647],
			[168, 168, 188, 207, 228, 247, 267, 286, 308, 327, 347, 368, 388, 408, 429, 450, 469, 489, 509, 528, 548, 646, 663, 681],
			[174, 174, 195, 216, 237, 259, 280, 302, 322, 343, 365, 385, 407, 429, 450, 471, 492, 513, 534, 555, 577, 679, 696, 713],
			[180, 180, 203, 226, 247, 270, 292, 315, 337, 359, 382, 404, 426, 450, 471, 493, 515, 538, 560, 582, 605, 713, 729, 747],
			[188, 188, 211, 235, 257, 281, 304, 327, 352, 375, 399, 422, 443, 469, 492, 515, 539, 562, 585, 609, 632, 744, 762, 0],
			[194, 194, 219, 243, 267, 292, 317, 342, 366, 390, 414, 439, 465, 489, 513, 538, 562, 586, 610, 636, 661, 778, 0, 0],
			[200, 200, 227, 252, 278, 303, 329, 355, 380, 407, 432, 458, 483, 509, 534, 560, 585, 610, 637, 662, 0, 0, 0, 0],
			[208, 208, 235, 261, 288, 315, 342, 368, 394, 422, 450, 475, 502, 528, 555, 582, 609, 636, 662, 0, 0, 0, 0, 0],
			[214, 214, 242, 270, 298, 327, 354, 382, 409, 437, 466, 494, 520, 548, 577, 605, 632, 661, 0, 0, 0, 0, 0, 0],
			[221, 221, 250, 280, 308, 337, 367, 395, 424, 453, 481, 510, 541, 569, 598, 627, 656, 0, 0, 0, 0, 0, 0, 0],
			[228, 228, 257, 288, 318, 348, 378, 408, 438, 469, 499, 529, 559, 589, 619, 649, 0, 0, 0, 0, 0, 0, 0, 0],
			[235, 235, 266, 297, 328, 360, 391, 422, 453, 484, 515, 547, 577, 609, 641, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[242, 242, 274, 307, 338, 371, 404, 436, 467, 500, 533, 565, 596, 630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[250, 250, 281, 317, 348, 382, 414, 450, 481, 515, 548, 582, 615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[256, 256, 290, 324, 359, 393, 429, 462, 496, 532, 565, 600, 635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[261, 261, 297, 332, 369, 404, 440, 476, 512, 548, 582, 618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[269, 269, 306, 342, 378, 416, 452, 489, 525, 563, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[275, 275, 313, 352, 389, 427, 465, 503, 541, 579, 615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[281, 281, 322, 361, 399, 438, 477, 517, 555, 594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			[289, 289, 329, 369, 409, 450, 489, 529, 570, 610, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		];

		squareMeters = sizeWidth * sizeHeight / 10000;
		if (squareMeters < 0.5) {
			squareMeters = 0.5;
		}

		if (modelCode == 0) {
			totalPrice = woodenBlindsPrices25mm[sizeWidth][sizeHeight];
		} else {
			totalPrice = woodenBlindsPrices50mm[sizeWidth][sizeHeight];
		}

		if (StrVodeneChk == 1) {
			totalPrice = totalPrice + 0;
		}

		if (modelCode == 0) {
			totalPrice *= 1.1;
		}
		else {
			totalPrice *= 1.1;
		}

		totalPrice -= totalPrice * (discount / 100);

		if (totalPrice == 0) {
			return "Зададените размери са извън позволените";
		}
		else {
			return totalPrice;
		}
	}
}

export default {
    calculate,
}
