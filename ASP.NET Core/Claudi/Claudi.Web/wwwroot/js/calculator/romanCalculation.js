function calculate(model, color, width, height, driving) {
	let models = ["Елеганте", "Аура"];
	let colors = [
		"cesta",
		"rioja",
		"golfo",
		"lavanda",
		"cuisine", //group 0 from 0 - 4

		"vereda",
		"vanesa",
		"brest",
		"valea",
		"altea",
		"jacquard",//group 1 from 5 - 10

		"cotton",
		"mimos",
		"veronika"]; //group 0 from 11 - 12

	let coeficients =
		[
			[1, 1.1, 1.25],
			[1, 1.1, 1.25]
		];

	let colorCode = 0;	//default color
	let modelCode = 0; // default model
	let totalPrice = 0;



	let stillTable = [
		[55, 64, 73, 80, 90, 98, 108, 115, 124, 132, 143, 149],
		[57, 67, 75, 84, 94, 104, 112, 123, 130, 138, 148, 158],
		[59, 70, 78, 88, 98, 107, 115, 127, 135, 143, 155, 164],
		[64, 77, 84, 95, 107, 114, 125, 138, 144, 154, 167, 175],
		[67, 78, 88, 98, 110, 118, 130, 142, 149, 160, 173, 183],
		[73, 84, 94, 107, 117, 129, 139, 152, 162, 172, 185, 195],
		[75, 87, 97, 109, 123, 132, 143, 158, 167, 177, 193, 200],
		[77, 89, 100, 112, 125, 135, 148, 163, 173, 183, 198, 208],
		[80, 95, 107, 118, 134, 144, 159, 172, 183, 194, 209, 222],
		[83, 98, 109, 123, 138, 148, 163, 177, 189, 199, 217, 228],
		[88, 105, 115, 130, 145, 159, 172, 188, 198, 209, 228, 239],
		[90, 108, 118, 133, 148, 163, 175, 193, 203, 218, 234, 248],
		[93, 109, 123, 138, 154, 165, 179, 197, 209, 224, 243, 255],
		[98, 114, 129, 143, 162, 174, 190, 207, 222, 233, 253, 265],
		[100, 117, 132, 147, 165, 178, 195, 214, 227, 239, 259, 275],
		[105, 124, 139, 154, 173, 189, 203, 223, 235, 250, 273, 285],
		[108, 127, 142, 159, 177, 193, 208, 228, 244, 258, 279, 293]
	];

	let maxiStilTable = [
		[68, 74, 80, 93, 100, 108, 113, 120, 133, 139, 145, 154, 159, 172, 178, 183, 190, 197, 210, 217, 223, 232, 237, 247],
		[70, 78, 83, 95, 104, 110, 118, 125, 138, 145, 150, 159, 167, 179, 184, 192, 198, 205, 217, 227, 234, 240, 245, 260],
		[73, 80, 87, 102, 108, 117, 125, 132, 147, 152, 159, 169, 178, 190, 197, 205, 212, 218, 233, 243, 248, 257, 264, 278],
		[74, 82, 90, 104, 110, 123, 128, 135, 150, 157, 165, 177, 182, 197, 205, 213, 218, 227, 242, 249, 260, 267, 275, 287],
		[78, 84, 93, 108, 117, 127, 135, 145, 158, 167, 175, 184, 193, 209, 217, 224, 234, 242, 255, 267, 275, 282, 293, 307],
		[79, 87, 95, 110, 118, 132, 139, 148, 163, 172, 180, 192, 199, 214, 223, 233, 242, 248, 264, 277, 283, 293, 302, 315],
		[82, 92, 100, 114, 125, 138, 147, 155, 172, 180, 190, 202, 212, 227, 237, 244, 253, 264, 279, 292, 300, 309, 319, 334],
		[83, 93, 104, 118, 128, 140, 150, 159, 177, 184, 195, 209, 217, 234, 243, 252, 263, 270, 287, 300, 309, 319, 329, 345],
		[84, 95, 107, 124, 133, 148, 157, 168, 183, 195, 205, 217, 230, 244, 255, 265, 277, 284, 303, 315, 327, 335, 347, 364],
		[87, 97, 109, 127, 135, 150, 159, 172, 189, 199, 210, 223, 235, 249, 263, 274, 283, 295, 310, 325, 334, 347, 358, 374],
		[90, 102, 112, 132, 143, 157, 168, 179, 197, 209, 218, 234, 244, 264, 275, 284, 298, 308, 327, 340, 350, 363, 375, 393],
		[92, 105, 114, 133, 147, 159, 172, 183, 202, 213, 224, 240, 249, 269, 280, 295, 304, 315, 334, 349, 362, 374, 384, 402],
		[94, 108, 118, 138, 150, 167, 179, 190, 210, 222, 235, 248, 263, 280, 295, 307, 318, 330, 349, 365, 377, 390, 402, 420],
		[95, 109, 123, 140, 154, 169, 182, 195, 214, 227, 240, 255, 268, 287, 300, 312, 327, 338, 360, 374, 387, 398, 412, 433],
		[100, 112, 127, 147, 159, 177, 189, 203, 222, 237, 248, 265, 279, 299, 312, 327, 340, 352, 374, 390, 402, 415, 430, 450],
		[102, 113, 128, 149, 163, 179, 193, 207, 227, 242, 255, 270, 284, 307, 319, 333, 348, 362, 382, 398, 412, 427, 439, 462],
		[104, 117, 129, 152, 167, 182, 197, 212, 233, 245, 262, 278, 293, 312, 328, 342, 357, 368, 392, 408, 420, 435, 450, 470],
		[105, 120, 134, 157, 172, 189, 203, 218, 240, 255, 269, 287, 302, 325, 338, 354, 368, 383, 405, 422, 437, 453, 467, 492],
		[107, 123, 138, 158, 175, 192, 209, 222, 244, 262, 275, 295, 308, 330, 347, 362, 377, 392, 413, 433, 447, 463, 477, 499],
		[109, 125, 140, 163, 179, 198, 214, 232, 252, 268, 283, 303, 319, 342, 358, 374, 390, 405, 430, 447, 463, 478, 495, 519],
		[110, 127, 145, 167, 182, 202, 218, 235, 257, 275, 292, 309, 327, 349, 365, 382, 397, 414, 437, 458, 472, 492, 504, 528],
		[113, 132, 148, 172, 189, 209, 224, 242, 267, 282, 300, 319, 335, 362, 378, 394, 412, 429, 453, 472, 492, 504, 523, 548]
	];

	getColor();
	getModel();
	let error = checkBounderies(modelCode, width, height);
	return printFinalPrice(error);

	function convertSize(arg, deviation) {
		let local = Math.round(Math.ceil(arg) / 10);

		local = local - deviation;

		if (local < 0) {
			local = 0;
		}
		return local;
	}

	function getColor() {
		colorCode = colors.indexOf(color);
	}

	function getModel() {
		modelCode = models.indexOf(model);
	}

	function checkBounderies(model, w, h) {

		let errMSG = "Зададените размери са извън позволената ширина/височина на продукта";
		if (model == 0) {
			if (w < 30 || w > 150 || h < 30 || h > 250) {
				return errMSG;
			}
			if ((w * h) / 10000 > 4) {
				return "Зададените размери са извън позволената квадратура на продукта";
			}
		}
		if (model == 1) {
			if (w < 40 || w > 270 || h < 40 || h > 300) {
				return errMSG;
			}
		}

	}

	function printFinalPrice(error) {
		if (error !== undefined) {
			return error;
		}

		let discount = 6;	//precent discount
		let K = 0;	// multiplier

		checkBounderies(modelCode, width, height);

		width = convertSize(width, 4);
		height = convertSize(height, 6);
		if (height < 0) {
			height = 0;
		}


		switch (modelCode) {
			case 0:
				totalPrice = stillTable[height][width];
				break;

			case 1:
				totalPrice = maxiStilTable[height][width];
				break;
		}

		switch (colorCode) {
			case 0:
			case 1:
			case 2:
			case 3:
			case 4:
				K = 0;
				break;
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
				K = 1;
				break;
			case 11:
			case 12:
			case 13:
				K = 2;
				break;
		}

		totalPrice *= coeficients[modelCode][K];
		if ((driving == 1) && (modelCode == 0)) {
			totalPrice += 7;
		}
		if ((driving == 1) && (modelCode == 1)) {
			totalPrice += 16.9;
		}

		totalPrice -= totalPrice * (discount / 100);

		return totalPrice;
	}
}

export default {
    calculate,
}
