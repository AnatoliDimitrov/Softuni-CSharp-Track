function calculate(model, color, width, height, driving = false, planks = false) {

    //Gettign values from sizes form for Horizontals and Verticals and Prints the result
    let colorCode = 0;	//default color
    let modelCode = 0; // default model
    let totalPrice = 0;
    //var selectedVerticalType;


    //Horizontals MODELS ---------------------------
    let horizontalModels = ["Пред Стъкло", "Пред Стъкло BlackOut", "Между Стъкло", "Макси Стандарт", "Макси Стандарт BlackOut", "Макси Лукс", "Ultimate", "Megaview", "Varioflex"];

    //Horizontal COLORS
    let horizontalColors = [
        "18", 	                                                       // price group 0 - to 0
        "7", "27", "58", "62", "63", "144", "302", "315", "24", "570", "378", "698", "700", "705", "707", "711", "712", "713", "714", "715", "872", "866", "716", "717", "266", "279", "1037", "103", "718", "870", "814", // price group 1 - to 31
        "1000", "027", "738", "695", "441", "43", "241", "330",                                           // price group 2 - 39
        "1pr", "285pr", "58pr", "780", "781", "8204", "8300", "754", "755",                               // price group 3 - to 48
        "991", "992", "993", "994", "995", "996", "997", "998",                                           // price group 4 - to 56
        "101", "102", "121", "107", "311", "371",                                                         // price group 5 - to 62
        "0150", "4459", "7010", "7113",                                                                   // price group 6 - to 66
        "7327", "7332", "7333", "7346", "7418", "8595",                                                   // price group 7 - to 72
        "0150p", "4459p", "7010p"                                                                         // price group 8 - to 75
    ];

    let CoeficientHorizontal = [
        [1.00, 1.07, 1.20, 1.70, 1.80, 1.30, 1.60, 2.50, 2.50],	// Pred Styklo
        [1.15, 1.25, 1.35, 2.00, 2.10, 1.45, 1.75, 2.65, 2.65],	// BlackOut
        [1.00, 1.07, 1.20, 1.70, 1.80, 1.30, 1.60, 2.50, 2.50],	// Mejdu Styklo
        [1.00, 1.10, 1.20, 1.70, 1.70, 1.25, 1.50, 2.20, 2.20],	// Maxi Standart
        [1.15, 1.25, 1.35, 1.85, 1.85, 1.40, 1.65, 2.35, 2.35],	// Maxi BlackOut
        [1.40, 1.45, 1.50, 1.90, 1.90, 1.50, 1.70, 2.40, 2.40], // Maxi Lux
        [0.00, 0.00, 0.00, 0.00, 1.25, 1.00, 1.20, 1.60, 1.60],	// UltiMate
        [0.00, 0.00, 0.00, 0.00, 1.40, 1.15, 1.35, 1.75, 1.75], // MegaView
        [0.00, 0.00, 0.00, 0.00, 1.90, 1.65, 1.85, 2.25, 2.25]  // VarioFlex
    ];

    let predStykloTable = [
        [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31, 31, 32, 33, 35],
        [17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41],
        [17, 17, 17, 17, 17, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 47],
        [17, 17, 17, 17, 17, 18, 20, 21, 22, 24, 25, 27, 29, 31, 32, 34, 35, 37, 38, 40, 41, 43, 44, 45, 47, 48, 50, 52],
        [17, 17, 17, 17, 17, 20, 21, 23, 25, 26, 28, 30, 32, 34, 36, 37, 39, 41, 42, 44, 46, 47, 49, 50, 52, 54, 55, 58],
        [17, 17, 17, 17, 18, 21, 23, 25, 27, 29, 31, 32, 35, 37, 39, 41, 43, 44, 46, 48, 50, 52, 54, 55, 57, 59, 61, 64],
        [17, 17, 17, 18, 20, 23, 25, 27, 29, 31, 33, 35, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 70],
        [17, 17, 17, 19, 21, 24, 27, 29, 31, 33, 36, 38, 41, 43, 46, 48, 50, 52, 54, 57, 59, 61, 63, 65, 68, 70, 72, 75],
        [17, 17, 18, 20, 23, 26, 28, 31, 33, 36, 38, 40, 44, 46, 49, 51, 54, 56, 58, 61, 63, 66, 68, 70, 73, 75, 77, 81],
        [17, 17, 19, 21, 24, 28, 30, 33, 35, 38, 41, 43, 47, 50, 52, 55, 57, 60, 62, 65, 68, 70, 73, 75, 78, 80, 83, 87],
        [17, 17, 20, 23, 25, 29, 32, 35, 37, 40, 43, 46, 50, 53, 55, 58, 61, 64, 66, 69, 72, 75, 77, 80, 83, 86, 88, 93],
        [17, 18, 21, 24, 27, 31, 34, 37, 40, 43, 46, 49, 53, 56, 59, 62, 65, 68, 70, 73, 76, 79, 82, 85, 88, 91, 94, 98],
        [17, 19, 22, 25, 28, 32, 35, 39, 42, 45, 48, 51, 56, 59, 62, 65, 68, 71, 75, 78, 81, 84, 87, 90, 93, 96, 99, 104],
        [17, 20, 23, 26, 29, 34, 37, 41, 44, 47, 51, 54, 59, 62, 65, 69, 72, 75, 79, 82, 85, 88, 92, 95, 98, 102, 105, 110],
        [17, 20, 24, 27, 31, 36, 39, 43, 46, 49, 53, 57, 62, 65, 69, 72, 76, 79, 83, 86, 90, 93, 97, 100, 104, 107, 111, 116],
        [17, 21, 25, 28, 32, 37, 41, 44, 48, 52, 56, 59, 65, 68, 72, 76, 79, 83, 87, 90, 94, 98, 101, 105, 109, 112, 116, 121],
        [18, 22, 26, 30, 34, 39, 43, 46, 50, 54, 58, 62, 67, 71, 75, 79, 83, 87, 91, 95, 98, 102, 106, 110, 114, 118, 122, 127],
        [19, 23, 27, 31, 35, 40, 44, 48, 52, 56, 61, 65, 70, 74, 78, 83, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127, 133],
        [19, 24, 28, 32, 36, 42, 46, 50, 55, 59, 63, 67, 73, 78, 82, 86, 90, 94, 99, 103, 107, 111, 116, 120, 124, 128, 133, 138],
        [20, 24, 29, 33, 38, 43, 48, 52, 57, 61, 66, 70, 76, 81, 85, 89, 94, 98, 103, 107, 112, 116, 120, 125, 129, 134, 0, 0],
        [21, 25, 30, 34, 39, 45, 50, 54, 59, 63, 68, 73, 79, 84, 88, 93, 98, 102, 107, 111, 116, 121, 125, 130, 134, 0, 0, 0],
        [21, 26, 31, 36, 40, 47, 51, 56, 61, 66, 71, 76, 82, 87, 92, 96, 101, 106, 111, 116, 120, 125, 130, 135, 0, 0, 0, 0],
        [22, 27, 32, 37, 42, 48, 53, 58, 63, 68, 73, 78, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 0, 0, 0, 0, 0],
        [22, 28, 33, 38, 43, 50, 55, 60, 65, 70, 76, 81, 88, 93, 98, 103, 109, 114, 119, 124, 129, 134, 0, 0, 0, 0, 0, 0],
        [23, 28, 34, 39, 44, 51, 57, 62, 67, 73, 78, 84, 91, 96, 102, 107, 112, 118, 123, 128, 134, 0, 0, 0, 0, 0, 0, 0],
        [24, 29, 35, 40, 46, 53, 58, 64, 70, 75, 81, 86, 94, 99, 105, 110, 116, 121, 127, 132, 0, 0, 0, 0, 0, 0, 0, 0],
        [24, 30, 36, 41, 47, 55, 60, 66, 72, 77, 83, 89, 97, 102, 108, 114, 120, 125, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [25, 31, 37, 43, 49, 56, 62, 68, 74, 80, 86, 92, 100, 106, 111, 117, 123, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [26, 32, 38, 44, 50, 58, 64, 70, 76, 82, 88, 95, 103, 109, 115, 121, 127, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ];

    let maxiTable = [
        [19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42],
        [19, 19, 19, 19, 19, 19, 19, 20, 21, 23, 24, 25, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 46, 48],
        [19, 19, 19, 19, 19, 19, 21, 22, 24, 25, 27, 28, 30, 32, 33, 35, 36, 38, 39, 41, 43, 44, 46, 47, 49, 50, 52, 54],
        [19, 19, 19, 19, 19, 21, 22, 24, 26, 28, 29, 31, 33, 35, 37, 39, 40, 42, 44, 46, 47, 49, 51, 52, 54, 56, 58, 60],
        [19, 19, 19, 19, 20, 22, 24, 26, 28, 30, 32, 34, 37, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 63, 66],
        [19, 19, 19, 19, 21, 24, 26, 28, 30, 33, 35, 37, 40, 42, 44, 46, 48, 50, 52, 55, 57, 59, 61, 63, 65, 67, 69, 72],
        [19, 19, 19, 21, 23, 26, 28, 30, 33, 35, 37, 40, 43, 45, 47, 50, 52, 54, 57, 59, 61, 64, 66, 68, 71, 73, 75, 78],
        [19, 19, 19, 22, 24, 27, 30, 32, 35, 37, 40, 43, 46, 48, 51, 53, 56, 58, 61, 64, 66, 69, 71, 74, 76, 79, 81, 84],
        [19, 19, 20, 23, 26, 29, 32, 35, 37, 40, 43, 46, 49, 52, 54, 57, 60, 63, 65, 68, 71, 73, 76, 79, 82, 84, 87, 91],
        [19, 19, 21, 24, 27, 31, 34, 37, 40, 42, 46, 48, 52, 55, 58, 61, 64, 67, 70, 73, 75, 78, 81, 84, 87, 90, 93, 97],
        [19, 19, 23, 26, 29, 33, 36, 39, 42, 45, 48, 51, 55, 58, 61, 65, 68, 71, 74, 77, 80, 83, 86, 89, 93, 96, 99, 103],
        [19, 20, 24, 27, 30, 34, 37, 41, 44, 47, 51, 54, 58, 62, 65, 68, 72, 75, 78, 82, 85, 88, 91, 95, 98, 101, 105, 109],
        [19, 21, 25, 28, 32, 36, 39, 43, 46, 50, 54, 57, 61, 65, 69, 72, 76, 79, 83, 86, 90, 93, 97, 100, 104, 107, 111, 115],
        [19, 22, 26, 29, 33, 38, 41, 45, 49, 52, 56, 60, 65, 68, 72, 76, 79, 83, 87, 91, 94, 98, 102, 105, 109, 113, 116, 121],
        [19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 68, 72, 76, 79, 83, 87, 91, 95, 99, 103, 107, 111, 115, 118, 122, 127],
        [20, 24, 28, 32, 36, 41, 45, 49, 53, 57, 62, 66, 71, 75, 79, 83, 87, 91, 95, 100, 104, 108, 112, 116, 120, 124, 128, 133],
        [20, 25, 29, 33, 37, 43, 47, 51, 55, 60, 64, 69, 74, 78, 83, 87, 91, 95, 100, 104, 108, 113, 117, 121, 126, 130, 134, 140],
        [21, 25, 30, 34, 39, 44, 49, 53, 58, 62, 67, 71, 77, 82, 86, 91, 95, 100, 104, 109, 113, 118, 122, 127, 131, 135, 140, 146],
        [22, 26, 31, 36, 40, 46, 51, 55, 60, 65, 70, 74, 80, 85, 90, 94, 99, 104, 108, 113, 118, 122, 127, 132, 136, 141, 146, 152],
        [22, 27, 32, 37, 42, 48, 53, 57, 62, 67, 72, 77, 83, 88, 93, 98, 103, 108, 113, 118, 122, 127, 132, 137, 142, 147, 0, 0],
        [23, 28, 33, 38, 43, 49, 54, 60, 65, 70, 75, 80, 86, 92, 97, 102, 107, 112, 117, 122, 127, 132, 137, 142, 147, 0, 0, 0],
        [24, 29, 34, 39, 45, 51, 56, 62, 67, 72, 78, 83, 90, 95, 100, 105, 111, 116, 121, 127, 132, 137, 142, 148, 0, 0, 0, 0],
        [24, 30, 35, 41, 46, 53, 58, 64, 69, 75, 80, 86, 93, 98, 104, 109, 115, 120, 126, 131, 137, 142, 147, 0, 0, 0, 0, 0],
        [25, 31, 36, 42, 48, 54, 60, 66, 71, 77, 83, 89, 96, 101, 107, 113, 119, 124, 130, 136, 141, 147, 0, 0, 0, 0, 0, 0],
        [26, 32, 37, 43, 49, 56, 62, 68, 74, 80, 86, 92, 99, 105, 111, 117, 122, 128, 134, 140, 146, 0, 0, 0, 0, 0, 0, 0],
        [26, 32, 38, 45, 51, 58, 64, 70, 76, 82, 88, 95, 102, 108, 114, 120, 126, 132, 138, 145, 0, 0, 0, 0, 0, 0, 0, 0],
        [27, 33, 40, 46, 52, 59, 66, 72, 78, 85, 91, 97, 105, 111, 118, 124, 130, 137, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [28, 34, 41, 47, 53, 61, 68, 74, 81, 87, 94, 100, 108, 115, 121, 128, 134, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [28, 35, 42, 48, 55, 63, 70, 76, 83, 89, 97, 103, 111, 118, 125, 131, 138, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ];

    let megaViewTable = [

        [40, 40, 40, 40, 40, 40, 41, 43, 46, 48, 51, 53, 59, 62, 64, 66, 69, 71, 73, 76, 78, 80, 83, 85, 87, 90, 92, 99],
        [40, 40, 40, 40, 40, 42, 44, 47, 49, 52, 55, 58, 64, 67, 70, 72, 75, 78, 80, 83, 86, 88, 91, 94, 96, 99, 102, 109],
        [40, 40, 40, 40, 40, 44, 47, 50, 53, 56, 60, 62, 70, 73, 76, 79, 82, 85, 88, 91, 93, 96, 99, 102, 105, 108, 111, 119],
        [40, 40, 40, 40, 40, 47, 50, 54, 57, 60, 64, 67, 75, 78, 81, 85, 88, 91, 95, 98, 101, 105, 108, 111, 114, 118, 121, 129],
        [40, 40, 40, 40, 43, 50, 53, 57, 61, 64, 68, 72, 80, 84, 87, 91, 95, 98, 102, 105, 109, 113, 116, 120, 124, 127, 131, 139],
        [40, 40, 40, 41, 45, 53, 57, 61, 64, 68, 73, 77, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 149],
        [40, 40, 40, 43, 47, 56, 60, 64, 68, 72, 77, 82, 90, 95, 99, 103, 108, 112, 116, 120, 125, 129, 133, 138, 142, 146, 150, 160],
        [40, 40, 41, 45, 50, 58, 63, 67, 72, 77, 82, 87, 96, 100, 105, 109, 114, 119, 123, 128, 132, 137, 142, 146, 151, 155, 160, 170],
        [40, 40, 43, 47, 52, 61, 66, 71, 76, 81, 86, 91, 101, 106, 111, 116, 121, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 180],
        [40, 40, 44, 50, 55, 64, 69, 74, 80, 85, 91, 96, 106, 111, 117, 122, 127, 132, 138, 143, 148, 153, 159, 164, 169, 174, 180, 190],
        [40, 41, 46, 52, 57, 67, 72, 78, 83, 89, 95, 101, 111, 117, 122, 128, 134, 139, 145, 150, 156, 161, 167, 173, 178, 184, 189, 200],
        [40, 42, 48, 54, 60, 70, 75, 81, 87, 93, 100, 106, 116, 122, 128, 134, 140, 146, 152, 158, 164, 170, 175, 181, 187, 193, 199, 210],
        [40, 44, 50, 56, 62, 72, 79, 85, 91, 97, 104, 111, 122, 128, 134, 140, 147, 153, 159, 165, 171, 178, 184, 190, 196, 203, 209, 220],
        [40, 45, 52, 58, 65, 75, 82, 88, 95, 101, 109, 115, 127, 133, 140, 146, 153, 160, 166, 173, 179, 186, 192, 199, 205, 212, 219, 230],
        [40, 47, 53, 60, 67, 78, 85, 92, 98, 105, 113, 120, 132, 139, 146, 153, 160, 166, 173, 180, 187, 194, 201, 208, 215, 221, 228, 241],
        [41, 48, 55, 62, 69, 81, 88, 95, 102, 109, 118, 125, 137, 144, 152, 159, 166, 173, 180, 188, 195, 202, 209, 216, 224, 231, 238, 251],
        [42, 49, 57, 64, 72, 84, 91, 98, 106, 113, 122, 130, 142, 150, 157, 165, 173, 180, 188, 195, 203, 210, 218, 225, 233, 240, 248, 261],
        [43, 51, 59, 66, 74, 86, 94, 102, 110, 118, 127, 135, 148, 155, 163, 171, 179, 187, 195, 203, 210, 218, 226, 234, 242, 250, 258, 271],
        [44, 52, 60, 69, 77, 89, 97, 105, 113, 122, 131, 139, 153, 161, 169, 177, 186, 194, 202, 210, 218, 226, 235, 243, 251, 259, 267, 281],
        [45, 54, 62, 71, 79, 92, 100, 109, 117, 126, 136, 144, 158, 167, 175, 184, 192, 201, 209, 218, 226, 235, 243, 252, 260, 269, 0, 0],
        [47, 55, 64, 73, 82, 95, 104, 112, 121, 130, 140, 149, 163, 172, 181, 190, 199, 207, 216, 225, 234, 243, 251, 260, 269, 0, 0, 0],
        [48, 57, 66, 75, 84, 98, 107, 116, 125, 134, 145, 154, 168, 178, 187, 196, 205, 214, 223, 232, 242, 251, 260, 269, 0, 0, 0, 0],
        [49, 58, 68, 77, 86, 100, 110, 119, 129, 138, 149, 159, 174, 183, 193, 202, 212, 221, 230, 240, 249, 259, 268, 0, 0, 0, 0, 0],
        [50, 60, 69, 79, 89, 103, 113, 123, 132, 142, 154, 163, 179, 189, 198, 208, 218, 228, 238, 247, 257, 267, 0, 0, 0, 0, 0, 0],
        [51, 61, 71, 81, 91, 106, 116, 126, 136, 146, 158, 168, 184, 194, 204, 214, 224, 235, 245, 255, 265, 0, 0, 0, 0, 0, 0, 0],
        [52, 63, 73, 83, 94, 109, 119, 130, 140, 150, 163, 173, 189, 200, 210, 221, 231, 241, 252, 262, 0, 0, 0, 0, 0, 0, 0, 0],
        [53, 64, 75, 86, 96, 112, 122, 133, 144, 154, 167, 178, 194, 205, 216, 227, 237, 248, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [54, 66, 77, 88, 99, 114, 125, 136, 147, 159, 172, 183, 200, 211, 222, 233, 244, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [56, 67, 78, 90, 101, 117, 129, 140, 151, 163, 176, 187, 205, 216, 228, 239, 250, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ];
    getModel(model);
    getColor(color);
    let error = checkBounderies(modelCode, width, height);
    return printFinalPrice(error);

    // When clicked on the select menu
    function getColor(color) {
        colorCode = horizontalColors.indexOf(color.toLowerCase());
    }

    function getModel(model) {
        modelCode = horizontalModels.indexOf(model);	//models are the rows in  horizontalTable

    }

    function findPriceHorizontal(arg) {
        let local = Math.round(Math.ceil(arg) / 10);

        //local = local / 10;

        if (local < 0) {
            local = 0;
        }

        return local;
    }

    // checks the width and height
    function checkBounderies(model, width, height) {
        let errorMSG = "Зададените размери са извън позволената ширина/височина на продукта";
        let isThereError = false;
        switch (model) {
            case 0:
            case 2:
                {
                    if (width < 20 || width > 380 || height < 10 || height > 350) {
                        isThereError = true;
                    }
                } break;

            case 1:
                if (width < 26 || width > 380 || height < 10 || height > 350) {
                    isThereError = true;
                } break;

            case 3:
                if (width < 22 || width > 300 || height < 10 || height > 350) {
                    isThereError = true;
                } break;

            case 4:
                if (width < 26 || width > 300 || height < 10 || height > 350) {
                    isThereError = true;
                } break;

            case 5:
                if (width < 19 || width > 300 || height < 10 || height > 220) {
                    isThereError = true;
                } break;

            case 6:
                if (width < 32 || width > 330 || height < 20 || height > 300) {
                    isThereError = true;
                } break;

            case 7:
                if (width < 32 || width > 270 || height < 20 || height > 300) {
                    isThereError = true;
                } break;

            case 8:
                if (width < 41 || width > 300 || height < 40 || height > 300) {
                    isThereError = true;
                } break;
        }
        if (isThereError) {
            return errorMSG;

        }
        else {
            undefined;
        }
    }

    function printFinalPrice(error) {
        if (error !== undefined) {
            return error;
        }

        let sizeWidthRaw = width;
        let sizeHeightRaw = height;

        let sizeWidth = findPriceHorizontal(sizeWidthRaw);
        let sizeHeight = findPriceHorizontal(sizeHeightRaw);
        sizeWidth -= 3;
        sizeHeight -= 2;

        if (sizeWidth < 0) {
            sizeWidth = 0;
        }

        if (sizeHeight < 0) {
            sizeHeight = 0;
        }

        let squareMeters;
        let discount = 6;	//precent discount
        let colorGroup;
        let errorMSG = "Зададените размери са извън позволената площ на продукта";
        
        let normalMaxSquareMeters = 6;
        let ultimateMegaMaxSqareMeters = 4;

        //finding The colors
        if (colorCode == 0) {
            colorGroup = 0;
        }
        if (colorCode > 0) {
            colorGroup = 1;
        }
        if (colorCode > 31) {	// old 40
            colorGroup = 2;
        }
        if (colorCode > 39) {
            colorGroup = 3;
        }
        if (colorCode > 48) {
            colorGroup = 4;
        }
        if (colorCode > 56) {
            colorGroup = 5;
        }
        if (colorCode > 62) {
            colorGroup = 6;
        }
        if (colorCode > 66) {
            colorGroup = 7;
        }
        if (colorCode > 72) {
            colorGroup = 8;
        }
        if (colorCode > 77) {
            colorGroup = 9;
        }

        switch (modelCode) {
            case 0:
                totalPrice = predStykloTable[sizeHeight][sizeWidth];
                totalPrice *= CoeficientHorizontal[0][colorGroup];
                break;
            case 1:
                totalPrice = predStykloTable[sizeHeight][sizeWidth];
                totalPrice *= CoeficientHorizontal[1][colorGroup];
                break;
            case 2:
                totalPrice = predStykloTable[sizeHeight][sizeWidth];
                totalPrice *= CoeficientHorizontal[2][colorGroup];
                break;
            case 3:
                totalPrice = maxiTable[sizeHeight][sizeWidth];
                totalPrice *= CoeficientHorizontal[3][colorGroup];
                break;
            case 4:
                totalPrice = maxiTable[sizeHeight][sizeWidth];
                totalPrice *= CoeficientHorizontal[4][colorGroup];
                break;
            case 5:
                totalPrice = maxiTable[sizeHeight][sizeWidth];
                totalPrice *= CoeficientHorizontal[5][colorGroup];
                break;
            case 6:
                totalPrice = megaViewTable[sizeHeight][sizeWidth];
                totalPrice *= CoeficientHorizontal[6][colorGroup];
                break;
            case 7:
                totalPrice = megaViewTable[sizeHeight][sizeWidth];
                totalPrice *= CoeficientHorizontal[7][colorGroup];
                break;
            case 8:
                totalPrice = megaViewTable[sizeHeight][sizeWidth];
                totalPrice *= CoeficientHorizontal[8][colorGroup];
                break;
        }

        squareMeters = sizeWidth * sizeHeight / 10000;
        // checking the bounderies
        if (squareMeters > normalMaxSquareMeters) {
            return errorMSG;
        }

        if (modelCode == 4 || modelCode == 8)
        {
            if (squareMeters > 2) {
                return errorMSG;
            }
        }
        if (modelCode == 7) {
            if (squareMeters > ultimateMegaMaxSqareMeters) {
                return errorMSG;
            }
        }

        let StrVodeneChk = driving;
        let PlankiLux = planks;

        if (StrVodeneChk == 1 && totalPrice > 0) {

            if (modelCode >= 6) {
                totalPrice = totalPrice + 6.5;
            }
            else {
                totalPrice = totalPrice + 5.9;
            }
        }
        if (PlankiLux == 1 && totalPrice > 0) {
            totalPrice = totalPrice + 0.5;
        }

        totalPrice -= totalPrice * (discount / 100);

        if (totalPrice == 0) {
            return totalPrice = "Неподдържан цвят за този модел";

        }
        else {

            return totalPrice;
        }
    }
}

export default {
    calculate,
}